// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: scmj.proto

package protocol

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PROTOID int32

const (
	PROTOID_EMPTY PROTOID = 0
	// 登录
	PROTOID_CS_LOGIN PROTOID = 1
	PROTOID_SC_LOGIN PROTOID = 2
	// 创建牌桌
	PROTOID_CS_CREATE_TABLE PROTOID = 3
	PROTOID_SC_TABLE_INFO   PROTOID = 4
)

// Enum value maps for PROTOID.
var (
	PROTOID_name = map[int32]string{
		0: "EMPTY",
		1: "CS_LOGIN",
		2: "SC_LOGIN",
		3: "CS_CREATE_TABLE",
		4: "SC_TABLE_INFO",
	}
	PROTOID_value = map[string]int32{
		"EMPTY":           0,
		"CS_LOGIN":        1,
		"SC_LOGIN":        2,
		"CS_CREATE_TABLE": 3,
		"SC_TABLE_INFO":   4,
	}
)

func (x PROTOID) Enum() *PROTOID {
	p := new(PROTOID)
	*p = x
	return p
}

func (x PROTOID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROTOID) Descriptor() protoreflect.EnumDescriptor {
	return file_scmj_proto_enumTypes[0].Descriptor()
}

func (PROTOID) Type() protoreflect.EnumType {
	return &file_scmj_proto_enumTypes[0]
}

func (x PROTOID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROTOID.Descriptor instead.
func (PROTOID) EnumDescriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{0}
}

type PLAY_MODE int32

const (
	PLAY_MODE_XLCH PLAY_MODE = 0 // 血流成河
	PLAY_MODE_XZDD PLAY_MODE = 1 // 血战到底
)

// Enum value maps for PLAY_MODE.
var (
	PLAY_MODE_name = map[int32]string{
		0: "XLCH",
		1: "XZDD",
	}
	PLAY_MODE_value = map[string]int32{
		"XLCH": 0,
		"XZDD": 1,
	}
)

func (x PLAY_MODE) Enum() *PLAY_MODE {
	p := new(PLAY_MODE)
	*p = x
	return p
}

func (x PLAY_MODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLAY_MODE) Descriptor() protoreflect.EnumDescriptor {
	return file_scmj_proto_enumTypes[1].Descriptor()
}

func (PLAY_MODE) Type() protoreflect.EnumType {
	return &file_scmj_proto_enumTypes[1]
}

func (x PLAY_MODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PLAY_MODE.Descriptor instead.
func (PLAY_MODE) EnumDescriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{1}
}

type CsLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CsLogin) Reset() {
	*x = CsLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsLogin) ProtoMessage() {}

func (x *CsLogin) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsLogin.ProtoReflect.Descriptor instead.
func (*CsLogin) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{0}
}

func (x *CsLogin) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CsLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ScLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Pid      uint64 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Sex      int32  `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`                           // 性别
	RoomCard int64  `protobuf:"varint,5,opt,name=room_card,json=roomCard,proto3" json:"room_card,omitempty"` // 房卡数量
}

func (x *ScLogin) Reset() {
	*x = ScLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScLogin) ProtoMessage() {}

func (x *ScLogin) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScLogin.ProtoReflect.Descriptor instead.
func (*ScLogin) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{1}
}

func (x *ScLogin) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ScLogin) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ScLogin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScLogin) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *ScLogin) GetRoomCard() int64 {
	if x != nil {
		return x.RoomCard
	}
	return 0
}

type ScmjRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayMode      uint32 `protobuf:"varint,1,opt,name=play_mode,json=playMode,proto3" json:"play_mode,omitempty"`
	PlayTurn      uint32 `protobuf:"varint,2,opt,name=play_turn,json=playTurn,proto3" json:"play_turn,omitempty"`                  // 局数
	MaxPoint      uint32 `protobuf:"varint,3,opt,name=max_point,json=maxPoint,proto3" json:"max_point,omitempty"`                  // 最大番数
	SelfWinType   uint32 `protobuf:"varint,4,opt,name=self_win_type,json=selfWinType,proto3" json:"self_win_type,omitempty"`       // 自摸加底或者加番
	ExposeWinType uint32 `protobuf:"varint,5,opt,name=expose_win_type,json=exposeWinType,proto3" json:"expose_win_type,omitempty"` // 点杠花点炮或者点杠花自摸
	HszSwitch     uint32 `protobuf:"varint,6,opt,name=hsz_switch,json=hszSwitch,proto3" json:"hsz_switch,omitempty"`               // 是否换三张
	JdSwitch      uint32 `protobuf:"varint,7,opt,name=jd_switch,json=jdSwitch,proto3" json:"jd_switch,omitempty"`                  // 是否算将对
	MqzzSwitch    uint32 `protobuf:"varint,8,opt,name=mqzz_switch,json=mqzzSwitch,proto3" json:"mqzz_switch,omitempty"`            // 是否算门清中张
	TdhSwitch     uint32 `protobuf:"varint,9,opt,name=tdh_switch,json=tdhSwitch,proto3" json:"tdh_switch,omitempty"`               // 是否有天地胡
}

func (x *ScmjRule) Reset() {
	*x = ScmjRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScmjRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScmjRule) ProtoMessage() {}

func (x *ScmjRule) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScmjRule.ProtoReflect.Descriptor instead.
func (*ScmjRule) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{2}
}

func (x *ScmjRule) GetPlayMode() uint32 {
	if x != nil {
		return x.PlayMode
	}
	return 0
}

func (x *ScmjRule) GetPlayTurn() uint32 {
	if x != nil {
		return x.PlayTurn
	}
	return 0
}

func (x *ScmjRule) GetMaxPoint() uint32 {
	if x != nil {
		return x.MaxPoint
	}
	return 0
}

func (x *ScmjRule) GetSelfWinType() uint32 {
	if x != nil {
		return x.SelfWinType
	}
	return 0
}

func (x *ScmjRule) GetExposeWinType() uint32 {
	if x != nil {
		return x.ExposeWinType
	}
	return 0
}

func (x *ScmjRule) GetHszSwitch() uint32 {
	if x != nil {
		return x.HszSwitch
	}
	return 0
}

func (x *ScmjRule) GetJdSwitch() uint32 {
	if x != nil {
		return x.JdSwitch
	}
	return 0
}

func (x *ScmjRule) GetMqzzSwitch() uint32 {
	if x != nil {
		return x.MqzzSwitch
	}
	return 0
}

func (x *ScmjRule) GetTdhSwitch() uint32 {
	if x != nil {
		return x.TdhSwitch
	}
	return 0
}

type CsCreateScmjTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *ScmjRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *CsCreateScmjTable) Reset() {
	*x = CsCreateScmjTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsCreateScmjTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsCreateScmjTable) ProtoMessage() {}

func (x *CsCreateScmjTable) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsCreateScmjTable.ProtoReflect.Descriptor instead.
func (*CsCreateScmjTable) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{3}
}

func (x *CsCreateScmjTable) GetRule() *ScmjRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type TablePlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid         uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Photo       uint32 `protobuf:"varint,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                   // 名字
	Identity    uint32 `protobuf:"varint,4,opt,name=identity,proto3" json:"identity,omitempty"`                          // 身份
	OnlineState uint32 `protobuf:"varint,5,opt,name=online_state,json=onlineState,proto3" json:"online_state,omitempty"` // 在线状态
}

func (x *TablePlayerData) Reset() {
	*x = TablePlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TablePlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablePlayerData) ProtoMessage() {}

func (x *TablePlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablePlayerData.ProtoReflect.Descriptor instead.
func (*TablePlayerData) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{4}
}

func (x *TablePlayerData) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *TablePlayerData) GetPhoto() uint32 {
	if x != nil {
		return x.Photo
	}
	return 0
}

func (x *TablePlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TablePlayerData) GetIdentity() uint32 {
	if x != nil {
		return x.Identity
	}
	return 0
}

func (x *TablePlayerData) GetOnlineState() uint32 {
	if x != nil {
		return x.OnlineState
	}
	return 0
}

type ScScmjTableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId   uint32             `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Rule      *ScmjRule          `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	StartTime uint64             `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Players   []*TablePlayerData `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *ScScmjTableInfo) Reset() {
	*x = ScScmjTableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScScmjTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScScmjTableInfo) ProtoMessage() {}

func (x *ScScmjTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScScmjTableInfo.ProtoReflect.Descriptor instead.
func (*ScScmjTableInfo) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{5}
}

func (x *ScScmjTableInfo) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ScScmjTableInfo) GetRule() *ScmjRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *ScScmjTableInfo) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ScScmjTableInfo) GetPlayers() []*TablePlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

var File_scmj_proto protoreflect.FileDescriptor

var file_scmj_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x63, 0x6d, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x40, 0x0a, 0x08, 0x63, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x79, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x43,
	0x61, 0x72, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x09, 0x73, 0x63, 0x6d, 0x6a, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x73, 0x7a, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x73, 0x7a, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x71, 0x7a, 0x7a, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x71, 0x7a, 0x7a, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x64, 0x68, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x64, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x22, 0x3f, 0x0a, 0x14, 0x63, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63,
	0x6d, 0x6a, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x73, 0x63, 0x6d, 0x6a, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x73, 0x63, 0x5f, 0x73, 0x63, 0x6d, 0x6a, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x63,
	0x6d, 0x6a, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x2a, 0x58, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x49, 0x44, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x53, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x2a, 0x1f, 0x0a,
	0x09, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x58, 0x4c,
	0x43, 0x48, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x58, 0x5a, 0x44, 0x44, 0x10, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scmj_proto_rawDescOnce sync.Once
	file_scmj_proto_rawDescData = file_scmj_proto_rawDesc
)

func file_scmj_proto_rawDescGZIP() []byte {
	file_scmj_proto_rawDescOnce.Do(func() {
		file_scmj_proto_rawDescData = protoimpl.X.CompressGZIP(file_scmj_proto_rawDescData)
	})
	return file_scmj_proto_rawDescData
}

var file_scmj_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_scmj_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_scmj_proto_goTypes = []interface{}{
	(PROTOID)(0),              // 0: protocol.PROTOID
	(PLAY_MODE)(0),            // 1: protocol.PLAY_MODE
	(*CsLogin)(nil),           // 2: protocol.cs_login
	(*ScLogin)(nil),           // 3: protocol.sc_login
	(*ScmjRule)(nil),          // 4: protocol.scmj_rule
	(*CsCreateScmjTable)(nil), // 5: protocol.cs_create_scmj_table
	(*TablePlayerData)(nil),   // 6: protocol.table_player_data
	(*ScScmjTableInfo)(nil),   // 7: protocol.sc_scmj_table_info
}
var file_scmj_proto_depIdxs = []int32{
	4, // 0: protocol.cs_create_scmj_table.rule:type_name -> protocol.scmj_rule
	4, // 1: protocol.sc_scmj_table_info.rule:type_name -> protocol.scmj_rule
	6, // 2: protocol.sc_scmj_table_info.players:type_name -> protocol.table_player_data
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_scmj_proto_init() }
func file_scmj_proto_init() {
	if File_scmj_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scmj_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScmjRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsCreateScmjTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TablePlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScScmjTableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scmj_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scmj_proto_goTypes,
		DependencyIndexes: file_scmj_proto_depIdxs,
		EnumInfos:         file_scmj_proto_enumTypes,
		MessageInfos:      file_scmj_proto_msgTypes,
	}.Build()
	File_scmj_proto = out.File
	file_scmj_proto_rawDesc = nil
	file_scmj_proto_goTypes = nil
	file_scmj_proto_depIdxs = nil
}
