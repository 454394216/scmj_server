// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: scmj.proto

package protocol

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PROTOID int32

const (
	PROTOID_EMPTY PROTOID = 0
	// 登录
	PROTOID_CS_LOGIN PROTOID = 1
	PROTOID_SC_LOGIN PROTOID = 2
	// 创建牌桌
	PROTOID_CS_CREATE_TABLE PROTOID = 3
	PROTOID_SC_TABLE_INFO   PROTOID = 4
	// 加入牌桌
	PROTOID_CS_JOIN_TABLE PROTOID = 5
	PROTOID_SC_JOIN_TABLE PROTOID = 6
	// 通知手牌
	PROTOID_SC_CARD_INFO PROTOID = 7
	// 通知游戏局数开始
	PROTOID_SC_GAME_TURN_START PROTOID = 8
	// 摸牌
	PROTOID_SC_DRAW_CARD PROTOID = 9
	// 胡，杠，碰，过，出牌
	PROTOID_CS_PLAYER_OPERATE PROTOID = 10
	PROTOID_SC_PLAYER_OPERATE PROTOID = 11
)

// Enum value maps for PROTOID.
var (
	PROTOID_name = map[int32]string{
		0:  "EMPTY",
		1:  "CS_LOGIN",
		2:  "SC_LOGIN",
		3:  "CS_CREATE_TABLE",
		4:  "SC_TABLE_INFO",
		5:  "CS_JOIN_TABLE",
		6:  "SC_JOIN_TABLE",
		7:  "SC_CARD_INFO",
		8:  "SC_GAME_TURN_START",
		9:  "SC_DRAW_CARD",
		10: "CS_PLAYER_OPERATE",
		11: "SC_PLAYER_OPERATE",
	}
	PROTOID_value = map[string]int32{
		"EMPTY":              0,
		"CS_LOGIN":           1,
		"SC_LOGIN":           2,
		"CS_CREATE_TABLE":    3,
		"SC_TABLE_INFO":      4,
		"CS_JOIN_TABLE":      5,
		"SC_JOIN_TABLE":      6,
		"SC_CARD_INFO":       7,
		"SC_GAME_TURN_START": 8,
		"SC_DRAW_CARD":       9,
		"CS_PLAYER_OPERATE":  10,
		"SC_PLAYER_OPERATE":  11,
	}
)

func (x PROTOID) Enum() *PROTOID {
	p := new(PROTOID)
	*p = x
	return p
}

func (x PROTOID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROTOID) Descriptor() protoreflect.EnumDescriptor {
	return file_scmj_proto_enumTypes[0].Descriptor()
}

func (PROTOID) Type() protoreflect.EnumType {
	return &file_scmj_proto_enumTypes[0]
}

func (x PROTOID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROTOID.Descriptor instead.
func (PROTOID) EnumDescriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{0}
}

type PLAY_MODE int32

const (
	PLAY_MODE_XLCH PLAY_MODE = 0 // 血流成河
	PLAY_MODE_XZDD PLAY_MODE = 1 // 血战到底
)

// Enum value maps for PLAY_MODE.
var (
	PLAY_MODE_name = map[int32]string{
		0: "XLCH",
		1: "XZDD",
	}
	PLAY_MODE_value = map[string]int32{
		"XLCH": 0,
		"XZDD": 1,
	}
)

func (x PLAY_MODE) Enum() *PLAY_MODE {
	p := new(PLAY_MODE)
	*p = x
	return p
}

func (x PLAY_MODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLAY_MODE) Descriptor() protoreflect.EnumDescriptor {
	return file_scmj_proto_enumTypes[1].Descriptor()
}

func (PLAY_MODE) Type() protoreflect.EnumType {
	return &file_scmj_proto_enumTypes[1]
}

func (x PLAY_MODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PLAY_MODE.Descriptor instead.
func (PLAY_MODE) EnumDescriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{1}
}

type CsLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CsLogin) Reset() {
	*x = CsLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsLogin) ProtoMessage() {}

func (x *CsLogin) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsLogin.ProtoReflect.Descriptor instead.
func (*CsLogin) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{0}
}

func (x *CsLogin) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *CsLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ScLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Pid      uint64 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Sex      int32  `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`                           // 性别
	RoomCard int64  `protobuf:"varint,5,opt,name=room_card,json=roomCard,proto3" json:"room_card,omitempty"` // 房卡数量
}

func (x *ScLogin) Reset() {
	*x = ScLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScLogin) ProtoMessage() {}

func (x *ScLogin) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScLogin.ProtoReflect.Descriptor instead.
func (*ScLogin) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{1}
}

func (x *ScLogin) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ScLogin) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ScLogin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScLogin) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *ScLogin) GetRoomCard() int64 {
	if x != nil {
		return x.RoomCard
	}
	return 0
}

type ScmjData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayMode      uint32 `protobuf:"varint,1,opt,name=play_mode,json=playMode,proto3" json:"play_mode,omitempty"`
	PlayTurn      uint32 `protobuf:"varint,2,opt,name=play_turn,json=playTurn,proto3" json:"play_turn,omitempty"`                  // 局数
	MaxPoint      uint32 `protobuf:"varint,3,opt,name=max_point,json=maxPoint,proto3" json:"max_point,omitempty"`                  // 最大番数
	SelfWinType   uint32 `protobuf:"varint,4,opt,name=self_win_type,json=selfWinType,proto3" json:"self_win_type,omitempty"`       // 自摸加底或者加番
	ExposeWinType uint32 `protobuf:"varint,5,opt,name=expose_win_type,json=exposeWinType,proto3" json:"expose_win_type,omitempty"` // 点杠花点炮或者点杠花自摸
	HszSwitch     uint32 `protobuf:"varint,6,opt,name=hsz_switch,json=hszSwitch,proto3" json:"hsz_switch,omitempty"`               // 是否换三张
	JdSwitch      uint32 `protobuf:"varint,7,opt,name=jd_switch,json=jdSwitch,proto3" json:"jd_switch,omitempty"`                  // 是否算将对
	MqzzSwitch    uint32 `protobuf:"varint,8,opt,name=mqzz_switch,json=mqzzSwitch,proto3" json:"mqzz_switch,omitempty"`            // 是否算门清中张
	TdhSwitch     uint32 `protobuf:"varint,9,opt,name=tdh_switch,json=tdhSwitch,proto3" json:"tdh_switch,omitempty"`               // 是否有天地胡
	MaxPlayer     uint32 `protobuf:"varint,10,opt,name=max_player,json=maxPlayer,proto3" json:"max_player,omitempty"`              // 最大游戏人数
}

func (x *ScmjData) Reset() {
	*x = ScmjData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScmjData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScmjData) ProtoMessage() {}

func (x *ScmjData) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScmjData.ProtoReflect.Descriptor instead.
func (*ScmjData) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{2}
}

func (x *ScmjData) GetPlayMode() uint32 {
	if x != nil {
		return x.PlayMode
	}
	return 0
}

func (x *ScmjData) GetPlayTurn() uint32 {
	if x != nil {
		return x.PlayTurn
	}
	return 0
}

func (x *ScmjData) GetMaxPoint() uint32 {
	if x != nil {
		return x.MaxPoint
	}
	return 0
}

func (x *ScmjData) GetSelfWinType() uint32 {
	if x != nil {
		return x.SelfWinType
	}
	return 0
}

func (x *ScmjData) GetExposeWinType() uint32 {
	if x != nil {
		return x.ExposeWinType
	}
	return 0
}

func (x *ScmjData) GetHszSwitch() uint32 {
	if x != nil {
		return x.HszSwitch
	}
	return 0
}

func (x *ScmjData) GetJdSwitch() uint32 {
	if x != nil {
		return x.JdSwitch
	}
	return 0
}

func (x *ScmjData) GetMqzzSwitch() uint32 {
	if x != nil {
		return x.MqzzSwitch
	}
	return 0
}

func (x *ScmjData) GetTdhSwitch() uint32 {
	if x != nil {
		return x.TdhSwitch
	}
	return 0
}

func (x *ScmjData) GetMaxPlayer() uint32 {
	if x != nil {
		return x.MaxPlayer
	}
	return 0
}

type CsCreateScmjTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ScmjData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CsCreateScmjTable) Reset() {
	*x = CsCreateScmjTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsCreateScmjTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsCreateScmjTable) ProtoMessage() {}

func (x *CsCreateScmjTable) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsCreateScmjTable.ProtoReflect.Descriptor instead.
func (*CsCreateScmjTable) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{3}
}

func (x *CsCreateScmjTable) GetData() *ScmjData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TablePlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid         uint64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Photo       uint32 `protobuf:"varint,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                   // 名字
	Identity    uint32 `protobuf:"varint,4,opt,name=identity,proto3" json:"identity,omitempty"`                          // 身份
	OnlineState uint32 `protobuf:"varint,5,opt,name=online_state,json=onlineState,proto3" json:"online_state,omitempty"` // 在线状态
}

func (x *TablePlayerData) Reset() {
	*x = TablePlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TablePlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablePlayerData) ProtoMessage() {}

func (x *TablePlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablePlayerData.ProtoReflect.Descriptor instead.
func (*TablePlayerData) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{4}
}

func (x *TablePlayerData) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *TablePlayerData) GetPhoto() uint32 {
	if x != nil {
		return x.Photo
	}
	return 0
}

func (x *TablePlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TablePlayerData) GetIdentity() uint32 {
	if x != nil {
		return x.Identity
	}
	return 0
}

func (x *TablePlayerData) GetOnlineState() uint32 {
	if x != nil {
		return x.OnlineState
	}
	return 0
}

type ScScmjTableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId   uint32             `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Data      *ScmjData          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	StartTime int64              `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Players   []*TablePlayerData `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *ScScmjTableInfo) Reset() {
	*x = ScScmjTableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScScmjTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScScmjTableInfo) ProtoMessage() {}

func (x *ScScmjTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScScmjTableInfo.ProtoReflect.Descriptor instead.
func (*ScScmjTableInfo) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{5}
}

func (x *ScScmjTableInfo) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ScScmjTableInfo) GetData() *ScmjData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ScScmjTableInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ScScmjTableInfo) GetPlayers() []*TablePlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

type CsJoinTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId  uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Identity uint32 `protobuf:"varint,2,opt,name=identity,proto3" json:"identity,omitempty"` // 身份
}

func (x *CsJoinTable) Reset() {
	*x = CsJoinTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsJoinTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsJoinTable) ProtoMessage() {}

func (x *CsJoinTable) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsJoinTable.ProtoReflect.Descriptor instead.
func (*CsJoinTable) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{6}
}

func (x *CsJoinTable) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *CsJoinTable) GetIdentity() uint32 {
	if x != nil {
		return x.Identity
	}
	return 0
}

type ScJoinTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatIndex int32            `protobuf:"varint,1,opt,name=seat_index,json=seatIndex,proto3" json:"seat_index,omitempty"` // 位置索引
	Player    *TablePlayerData `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *ScJoinTable) Reset() {
	*x = ScJoinTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScJoinTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScJoinTable) ProtoMessage() {}

func (x *ScJoinTable) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScJoinTable.ProtoReflect.Descriptor instead.
func (*ScJoinTable) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{7}
}

func (x *ScJoinTable) GetSeatIndex() int32 {
	if x != nil {
		return x.SeatIndex
	}
	return 0
}

func (x *ScJoinTable) GetPlayer() *TablePlayerData {
	if x != nil {
		return x.Player
	}
	return nil
}

type HandCardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card []int32 `protobuf:"varint,1,rep,packed,name=card,proto3" json:"card,omitempty"`
}

func (x *HandCardData) Reset() {
	*x = HandCardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandCardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandCardData) ProtoMessage() {}

func (x *HandCardData) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandCardData.ProtoReflect.Descriptor instead.
func (*HandCardData) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{8}
}

func (x *HandCardData) GetCard() []int32 {
	if x != nil {
		return x.Card
	}
	return nil
}

type TableCardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总的牌
	Left  int32 `protobuf:"varint,2,opt,name=left,proto3" json:"left,omitempty"`   // 剩余的牌
}

func (x *TableCardData) Reset() {
	*x = TableCardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCardData) ProtoMessage() {}

func (x *TableCardData) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCardData.ProtoReflect.Descriptor instead.
func (*TableCardData) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{9}
}

func (x *TableCardData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TableCardData) GetLeft() int32 {
	if x != nil {
		return x.Left
	}
	return 0
}

type ScCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCard  []*HandCardData `protobuf:"bytes,1,rep,name=hand_card,json=handCard,proto3" json:"hand_card,omitempty"`
	TableCard *TableCardData  `protobuf:"bytes,2,opt,name=table_card,json=tableCard,proto3" json:"table_card,omitempty"`
}

func (x *ScCardInfo) Reset() {
	*x = ScCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScCardInfo) ProtoMessage() {}

func (x *ScCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScCardInfo.ProtoReflect.Descriptor instead.
func (*ScCardInfo) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{10}
}

func (x *ScCardInfo) GetHandCard() []*HandCardData {
	if x != nil {
		return x.HandCard
	}
	return nil
}

func (x *ScCardInfo) GetTableCard() *TableCardData {
	if x != nil {
		return x.TableCard
	}
	return nil
}

type ScGameTurnStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiePoint int32 `protobuf:"varint,1,opt,name=die_point,json=diePoint,proto3" json:"die_point,omitempty"` // 筛子点数
}

func (x *ScGameTurnStart) Reset() {
	*x = ScGameTurnStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScGameTurnStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScGameTurnStart) ProtoMessage() {}

func (x *ScGameTurnStart) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScGameTurnStart.ProtoReflect.Descriptor instead.
func (*ScGameTurnStart) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{11}
}

func (x *ScGameTurnStart) GetDiePoint() int32 {
	if x != nil {
		return x.DiePoint
	}
	return 0
}

type ScDrawCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid  uint64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Card int32  `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *ScDrawCard) Reset() {
	*x = ScDrawCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScDrawCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScDrawCard) ProtoMessage() {}

func (x *ScDrawCard) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScDrawCard.ProtoReflect.Descriptor instead.
func (*ScDrawCard) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{12}
}

func (x *ScDrawCard) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ScDrawCard) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

type PlayerOperateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card int32 `protobuf:"varint,1,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *PlayerOperateData) Reset() {
	*x = PlayerOperateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOperateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOperateData) ProtoMessage() {}

func (x *PlayerOperateData) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOperateData.ProtoReflect.Descriptor instead.
func (*PlayerOperateData) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerOperateData) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

type CsPlayerOperate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid    uint64             `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	OpType int32              `protobuf:"varint,2,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	Data   *PlayerOperateData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CsPlayerOperate) Reset() {
	*x = CsPlayerOperate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsPlayerOperate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsPlayerOperate) ProtoMessage() {}

func (x *CsPlayerOperate) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsPlayerOperate.ProtoReflect.Descriptor instead.
func (*CsPlayerOperate) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{14}
}

func (x *CsPlayerOperate) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *CsPlayerOperate) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *CsPlayerOperate) GetData() *PlayerOperateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScPlayerOperate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid    uint64             `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	OpType int32              `protobuf:"varint,2,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	Data   *PlayerOperateData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScPlayerOperate) Reset() {
	*x = ScPlayerOperate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scmj_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScPlayerOperate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScPlayerOperate) ProtoMessage() {}

func (x *ScPlayerOperate) ProtoReflect() protoreflect.Message {
	mi := &file_scmj_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScPlayerOperate.ProtoReflect.Descriptor instead.
func (*ScPlayerOperate) Descriptor() ([]byte, []int) {
	return file_scmj_proto_rawDescGZIP(), []int{15}
}

func (x *ScPlayerOperate) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ScPlayerOperate) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *ScPlayerOperate) GetData() *PlayerOperateData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_scmj_proto protoreflect.FileDescriptor

var file_scmj_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x63, 0x6d, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x40, 0x0a, 0x08, 0x63, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x79, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x43,
	0x61, 0x72, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x09, 0x73, 0x63, 0x6d, 0x6a, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x66, 0x57, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x73, 0x7a, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x73, 0x7a, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x71, 0x7a, 0x7a, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x71, 0x7a, 0x7a, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x64, 0x68, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x64, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22,
	0x3f, 0x0a, 0x14, 0x63, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x6d,
	0x6a, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x73, 0x63, 0x6d, 0x6a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8e, 0x01, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x73, 0x63, 0x5f, 0x73, 0x63, 0x6d, 0x6a, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x63, 0x6d,
	0x6a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x22, 0x46, 0x0a, 0x0d, 0x63, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x63, 0x0a, 0x0d, 0x73, 0x63,
	0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22,
	0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x22, 0x7f, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x22, 0x31, 0x0a, 0x12, 0x73, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x0c, 0x73, 0x63, 0x5f, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x29, 0x0a, 0x13,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x71, 0x0a, 0x11, 0x63, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x11, 0x73, 0x63,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xe8, 0x01,
	0x0a, 0x07, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x49, 0x44, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x53, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x43, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x07,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x55, 0x52, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x5f, 0x44,
	0x52, 0x41, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x53,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x2a, 0x1f, 0x0a, 0x09, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x58, 0x4c, 0x43, 0x48, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x58, 0x5a, 0x44, 0x44, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_scmj_proto_rawDescOnce sync.Once
	file_scmj_proto_rawDescData = file_scmj_proto_rawDesc
)

func file_scmj_proto_rawDescGZIP() []byte {
	file_scmj_proto_rawDescOnce.Do(func() {
		file_scmj_proto_rawDescData = protoimpl.X.CompressGZIP(file_scmj_proto_rawDescData)
	})
	return file_scmj_proto_rawDescData
}

var file_scmj_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_scmj_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_scmj_proto_goTypes = []interface{}{
	(PROTOID)(0),              // 0: protocol.PROTOID
	(PLAY_MODE)(0),            // 1: protocol.PLAY_MODE
	(*CsLogin)(nil),           // 2: protocol.cs_login
	(*ScLogin)(nil),           // 3: protocol.sc_login
	(*ScmjData)(nil),          // 4: protocol.scmj_data
	(*CsCreateScmjTable)(nil), // 5: protocol.cs_create_scmj_table
	(*TablePlayerData)(nil),   // 6: protocol.table_player_data
	(*ScScmjTableInfo)(nil),   // 7: protocol.sc_scmj_table_info
	(*CsJoinTable)(nil),       // 8: protocol.cs_join_table
	(*ScJoinTable)(nil),       // 9: protocol.sc_join_table
	(*HandCardData)(nil),      // 10: protocol.hand_card_data
	(*TableCardData)(nil),     // 11: protocol.table_card_data
	(*ScCardInfo)(nil),        // 12: protocol.sc_card_info
	(*ScGameTurnStart)(nil),   // 13: protocol.sc_game_turn_start
	(*ScDrawCard)(nil),        // 14: protocol.sc_draw_card
	(*PlayerOperateData)(nil), // 15: protocol.player_operate_data
	(*CsPlayerOperate)(nil),   // 16: protocol.cs_player_operate
	(*ScPlayerOperate)(nil),   // 17: protocol.sc_player_operate
}
var file_scmj_proto_depIdxs = []int32{
	4,  // 0: protocol.cs_create_scmj_table.data:type_name -> protocol.scmj_data
	4,  // 1: protocol.sc_scmj_table_info.data:type_name -> protocol.scmj_data
	6,  // 2: protocol.sc_scmj_table_info.players:type_name -> protocol.table_player_data
	6,  // 3: protocol.sc_join_table.player:type_name -> protocol.table_player_data
	10, // 4: protocol.sc_card_info.hand_card:type_name -> protocol.hand_card_data
	11, // 5: protocol.sc_card_info.table_card:type_name -> protocol.table_card_data
	15, // 6: protocol.cs_player_operate.data:type_name -> protocol.player_operate_data
	15, // 7: protocol.sc_player_operate.data:type_name -> protocol.player_operate_data
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_scmj_proto_init() }
func file_scmj_proto_init() {
	if File_scmj_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scmj_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScmjData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsCreateScmjTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TablePlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScScmjTableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsJoinTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScJoinTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandCardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScGameTurnStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScDrawCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOperateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsPlayerOperate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scmj_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScPlayerOperate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scmj_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scmj_proto_goTypes,
		DependencyIndexes: file_scmj_proto_depIdxs,
		EnumInfos:         file_scmj_proto_enumTypes,
		MessageInfos:      file_scmj_proto_msgTypes,
	}.Build()
	File_scmj_proto = out.File
	file_scmj_proto_rawDesc = nil
	file_scmj_proto_goTypes = nil
	file_scmj_proto_depIdxs = nil
}
